<?php/* * **************************************** *     _____                     *    |  __ \                    *    | |  | |_   _  ___  _ __   *    | |  | | | | |/ _ \| '_ \  *    | |__| | |_| | (_) | | | | *    |_____/ \__, |\___/|_| |_| *             __/ |             *            |___/   *            *       Paulo Felipe Possa Parrira [ paul (dot) 0 (at) live (dot) de ] *  ===================================================================== *  File: instances.php *  Type: Controller *  ===================================================================== *  */require_once(config::$syspath . "includes/control/usuario/users.php");require_once(config::$syspath . "includes/control/evento/events.php");class instanceController {    public function __construct() {        $this->conn = new conn();    }    public function loadUserInstance(user $user) {        if (!is_numeric($user->getId())) {            throw new Exception("Identificador do usuário inválido.");        }        $query = "SELECT i.id_instancia, i.status_usuario, i.evento_padrao, i.fluxo_padrao, i.board_padrao, i.instancia_padrao, g.nome, g.id FROM instancia_usuario i INNER JOIN instancia_grupo g ON i.id_instancia_grupo = g.id WHERE `id_usuario` = " . $user->getId();        $results = $this->conn->freeQuery($query, true, true);        if (!$results) {            throw new Exception("O usuário não possui instâncias.");        }        if (count($results) == 1) {            $instance = $this->loadInstance($results[0]);            return array("count" => 1, "instances" => array($instance));        } else {            foreach ($results as $index => $userinstance) {                $instances[] = $this->loadInstance($userinstance);            }            return array("count" => count($instances), "instances" => $instances);        }    }    private function loadInstance($instance_index) {        if (is_array($instance_index)) {            $user_instance = true;            $user_instance_info = $instance_index;            $instance_index = $instance_index["id_instancia"];            if (!is_numeric($instance_index)) {                throw new Exception("Identificador da instância inválido.");            }        } else {            if (!is_numeric($instance_index)) {                throw new Exception("Identificador da instância inválido.");            }            $user_instance = false;        }        $this->conn->prepareselect("instancia", array("id", "nome", "image", "url", "status", "id_plano", "data_criacao", "id_criador"), "id", $instance_index);        if (!$this->conn->executa()) {            throw new Exception("Nenhuma instância encontrada com esse identificador.");        }                $instance = $this->conn->fetch;        $instance['plan'] = $this->loadPlan($instance['id_plano']);                if ($user_instance) {            $instance['user_info'] = $user_instance_info;        }        return $instance;    }        public function loadPlan($id_plan) {        if(!is_numeric($id_plan)) {            throw new Exception("Identificador do plano inválido.");        }                $this->conn->prepareselect("plano", array("id", "name", "max_users", "max_events"), "id", $id_plan);        if(!$this->conn->executa()) {            throw new Exception("Plano não encontrado.");        }                return $this->conn->fetch;            }    public function setDefaultInstance(user $user, $instance) {        if (!$user->getId() || !$user->isAuth()) {            throw new Exception("O usuário é inválido.");        }        if (!is_numeric($instance['id'])) {            throw new Exception("O identificador da instância é inválido.");        }        $instance = $this->loadInstance($instance['user_info']);        if ($instance['user_info']['status_usuario'] < 1) {            throw new Exception("O usuário não tem permissão para alterar para essa instância.");        }        $this->conn->prepareupdate(0, "instancia_padrao", "instancia_usuario", $user->getId(), "id_usuario", "INT");        if (!$this->conn->executa()) {            throw new Exception("Não foi possível alterar a instância para padrão. (0)");        }        $this->conn->prepareupdate(1, "instancia_padrao", "instancia_usuario", array($user->getId(), $instance['id']), array("id_usuario", "id_instancia"), "INT");        if (!$this->conn->executa()) {            throw new Exception("Não foi possível alterar a instância para padrão. (1)");        }    }    public function loadInstanceAddForm($user) {        if (!is_a($user, "user")) {            throw new Exception("Usuário inválido.");        }        $plans = $this->loadPlans();        Twig_Autoloader::register();        $this->twig_loader = new Twig_Loader_Filesystem('includes/interface/templates/public');        $this->twig = new Twig_Environment($this->twig_loader);        return $this->twig->render('instance/add_instance_form1.twig', array("user" => $user->getBasicInfo(), "plans" => $plans, "config" => config::$html_preload));    }    public function loadPlans() {        $this->conn->prepareselect("plano", array("id", "name", "max_users", "max_events"), "", "", "same", "", "", PDO::FETCH_ASSOC, "all");        if (!$this->conn->executa()) {            throw new Exception("Nenhum plano encontrado.");        }        return $this->conn->fetch;    }    private function getLastUserInstance($user_id) {        if (!is_numeric($user_id)) {            return 0;        }        $this->conn->prepareselect("instancia", "id", "id_criador", $user_id, "same", "", "", NULL, "", array("data_criacao", "DESC", "id", "DESC"), 1);        if (!$this->conn->executa()) {            return 0;        }        return $this->conn->fetch[0];    }    public function addInstance($instance, $user) {        if (!is_a($user, "user")) {            throw new Exception("Usuário inválido.");        }        $user_info = $user->getBasicInfo();        $plans = $this->loadPlans();        $plan_check_flag = 0;        foreach ($plans as $index => $plan) {            if ($plan['id'] == $instance['plan']) {                $plan_check_flag = 1;            }        }        if (!$plan_check_flag) {            throw new Exception("Plano selecionado inválido.");        }        if (!trim($instance['name'])) {            throw new Exception("Nome da Equipe Inválido.");        }        $time = new DateTime();        $this->conn->prepareinsert("instancia", array($instance['name'], 1, $instance['plan'], $time->format("Y-m-d"), $user_info['id']), array("nome", "status", "id_plano", "data_criacao", "id_criador"));        if (!$this->conn->executa()) {            throw new Exception("Não foi possível criar instância.");        }        $instance_id = $this->getLastUserInstance($user_info['id']);        $this->conn->prepareinsert("instancia_grupo", array($instance_id, "root", 0, 0, 0, 0, 0, 0, 1), array("id_instancia", "nome", "board", "evento", "controle", "financeiro", "hospedagem", "hotsite", "root"));        if (!$this->conn->executa()) {            throw new Exception("Erro ao criar o grupo de usuários.");        }        $this->conn->prepareselect("instancia_grupo", "id", "id_instancia", $instance_id);        if (!$this->conn->executa()) {            throw new Exception("Grupo do usuário não encontrado.");        }        $root_group_id = $this->conn->fetch[0];        $this->conn->prepareinsert("instancia_usuario", array($instance_id, $user_info['id'], $root_group_id, 10, 0), array("id_instancia", "id_usuario", "id_instancia_grupo", "status_usuario", "instancia_padrao"));        if (!$this->conn->executa()) {            throw new Exception("Não foi possível adicionar o usuário à instância.");        }        $user->setInfo(); // TODO: Criar função loadUserInstances na classe user        $user->setCurrentInstance($instance_id);    }    public function initManagerInterface($url) {        $usercontroller = new userController();        $user = $usercontroller->getUser();        $instance = $user->getUserInstance();        Twig_Autoloader::register();        $this->twig_loader = new Twig_Loader_Filesystem('includes/interface/templates/manager');        $this->twig = new Twig_Environment($this->twig_loader);        echo $this->twig->render('instance/manager_interface.twig', array("user" => $user->getBasicInfo(), "instance" => $instance, "config" => config::$html_preload));    }}function init_module_instance_manager($url) {    $instancecontroller = new instanceController();    $instancecontroller->initManagerInterface($url);}?>