<?php/* * **************************************** *     _____                     *    |  __ \                    *    | |  | |_   _  ___  _ __   *    | |  | | | | |/ _ \| '_ \  *    | |__| | |_| | (_) | | | | *    |_____/ \__, |\___/|_| |_| *             __/ |             *            |___/   *            *       Paulo Felipe Possa Parrira [ paul (dot) 0 (at) live (dot) de ] *  ===================================================================== *  File: users.php *  Type: Controller *  ===================================================================== *  */require("user.php");require(config::$syspath . "includes/lib/mailer.php");class userController extends user {    public function __construct() {        $this->conn = new conn();    }    /**     *  Realiza o processo de login de um user.     *  @param string $email     *  @param string $senha     */    public function loginUser($email, $senha) {        // Verifica se já não existe outro usuário logado        if (is_object($_SESSION['user'])) {            throw new Exception("Usuário já está logado.");        }        // Verifica se o e-mail é válido        if (!preg_match($this->email_pattern, $email)) {            throw new Exception("E-mail inválido.");        }        if (trim($senha) == "" || strlen($senha) < 6) {            throw new Exception("Senha inválida;");        }        $senha = md5($senha);        // Verifica se o usuário existe        $this->conn->prepareselect("usuario", "id", array("email", "senha"), array($email, $senha));        if (!$this->conn->executa()) {            throw new Exception("E-mail ou senha inválidos.");        }        if ($this->conn->fetch == "" || $this->conn->rowcount != 1) {            throw new Exception("Não foi possível autenticar o usuário.");        }        // O usuário é válido, vamos gerar um objeto.        try {            $user = new user($this->conn);            $user->setId($this->conn->fetch['id']);            $user->setInfo();            if (!$user->isAuth()) {                throw new Exception("O usuário possui informações inválidas e não foi possível autentica-lo.");            }            unset($user->query);            unset($user->conn);            // Vamos adicionar o usuário na sessão e gerar uma hash do login.            $_SESSION['user'] = serialize($user);            $_SESSION['auth_code'] = md5(md5($user->getCreationDate()) . md5($_SERVER['HTTP_USER_AGENT']));        } catch (Exception $a) {            throw new Exception($a->getMessage());        }    }    /**     *  Verifica se o user logado é válido.     */    public function authUser() {        @$this->user = unserialize($_SESSION['user']);        if (!is_object($this->user)) {            return false;        }        $new_hash = md5(md5($this->user->getCreationDate()) . md5($_SERVER['HTTP_USER_AGENT']));        $this->user->setConn($this->conn);        if ($new_hash != $_SESSION['auth_code']) {            return false;        } else {            return true;        }    }    /**     * Retorna um usuário, logado ou não.     * @param int $min_permission     * @param boolean $auth_required     * @return \user     * @throws Exception     */    public function getUser($min_permission = 0, $auth_required = true) {        if ($auth_required = true) {            if (!$this->authUser()) {                throw new Exception("Usuário logado é inválido.");            }            if ($min_permission > 0) {                if ($min_permission > $this->user->getPermission()) {                    throw new Exception("O usuário não tem permissão para realizar essa ação.");                }            }            return $this->user;        } else {            $new_user = new user($this->conn);            return $new_user;        }    }    /**     *  Remove as variáveis de sessão do user.     */    public function logoutUser() {        if (!$this->authUser()) {            throw new Exception("Não existe usuário logado.");        }        session_destroy();    }    /**     *  Registra um novo user no sistema.     *  @param int $tipo     */    public function addUser($tipo = 1) {        $filters = Array(            "nome" => FILTER_SANITIZE_SPECIAL_CHARS,            "email" => FILTER_VALIDATE_EMAIL,            "senha" => FILTER_SANITIZE_SPECIAL_CHARS,            "rg" => FILTER_VALIDATE_SPECIAL_CHARS,            "sexo" => FILTER_SANITIZE_SPECIAL_CHARS,            "cidade" => FILTER_SANITIZE_SPECIAL_CHARS,            "estado" => FILTER_SANITIZE_SPECIAL_CHARS        );        $user = filter_input_array(INPUT_POST, $filters);        if ($tipo > 1) {            if (!$this->getUser(DYON_USER_ADMIN)) {                throw new Exception("Você precisa ser um administrador para adicionar um usuário com essa permissão.");            }            if ($tipo > 5) {                throw new Exception("Não é possível adicionar um usuário com superpermissão, contacte o administrador do sistema.");            }        }        foreach ($user as $index => $field) {            if (trim($field) == "" || is_null($field)) {                throw new Exception("As informações disponibilizadas estão inválidas ou incompletas.");            }        }        if (!$this->validateEmail($user['email'])) {            throw new Exception("Email em formato inválido.");        }        if (strlen($user['senha']) < 6) {            throw new Exception("A senha deve conter ao menos 6 caracteres.");        }        $user['senha_md5'] = md5($user['senha']);        if ($user['sexo'] != 'm' && $user['sexo'] != 'f') {            throw new Exception("O sexo informado é inválido.");        }        if (strlen($user['estado']) != 2) {            throw new Exception("Sigla de estado inválida.");        }        $query['values'] = Array($user['nome'], $user['email'], $user['senha_md5'], $user['rg'], $user['sexo'], $user['cidade'], $user['estado'], $tipo);        $query['fields'] = Array("nome", "email", "senha", "rg", "sexo", "cidade", "estado", "tipo");        $this->conn->prepareinsert("usuario", $query['values'], $query['fields'], "");        if (!$this->conn->executa()) {            throw new Exception("Ocorreu um erro ao adicionar o usuário. (Email ou CPF já cadastrados)");        }        try {            $mailer = new mail();            $vars;            $vars['user']['nome'] = $user['nome'];            $vars['user']['email'] = $user['email'];            $mailer->sendTemplateEmail("cadastro_confirm", $vars, $vars['user']['email'], "Cadastro [ CarnaBoemia 2016 ]");        } catch (Exception $ex) {                    }    }    /**     *  Função genérica para pegar o código da imagem thumb do usuário.     */    public function getImagem($id, $is_thumb = false) {        if (!is_numeric($id)) {            throw new Exception("O id informado precisa ser numérico.");        }        if (!is_bool($is_thumb)) {            throw new Exception("is_thumb precisa receber um valor booleano.");        }        $this->conn->prepareselect("user", "imagem", "id", $id);        $this->conn->executa();        if ($this->conn->fetch == "") {            throw new Exception("Usuário não encontrado.");        }        if ($is_thumb == true) {            $imagem = "thumb_";        }        if ($this->conn->fetch['imagem'] != "0") {            $imagem .= md5($id) . "." . $this->conn->fetch['imagem'];        } else {            $imagem .= "no_imagem.png";        }        return $imagem;    }    public function listUsers($filters, $role, $field_list = null) {        $available_filters = Array("nome", "email", "rg", "cidade", "estado");        if (!in_array($filters['field']['label'], $available_filters)) {            throw new Exception("Sua pesquisa de usuário precisa ter algum filtro.");        }        if ($filters['order'] != "ASC" && $filters['order'] != 'DESC') {            $filters['order'] = "ASC";        }        if (!is_numeric($role) || ($role < 0 && $role > 10)) {            throw new Exception("Permissão inválida.");        }        if (!is_numeric($filters['page']) || $filters['page'] <= 0) {            $filters['page'] = 0;        }        if (is_null($field_list) || !is_array($field_list)) {            $field_list = Array("nome", "email", "rg", "cidade", "estado");        }        $field_list_old = $field_list;        $field_list[] = "id";        $this->conn->prepareselect("usuario", $field_list, Array($filters['field']['label'], "tipo"), Array($filters['field']['value'], $role), Array("like", "="), "", "", PDO::FETCH_NUM, "all", $orderby = Array($filters['field']['label'], $filters['order']), Array($filters['page'], 25));        if (!$this->conn->executa()) {            if ($this->conn->rowcount == 0) {                throw new Exception("Nenhum usuário encontrado com os filtros específicados.");            }            throw new Exception("Impossível pesquisar usuários");        }        $list = $this->conn->fetch;        $this->conn->prepareselect("usuario", $field_list, Array($filters['field']['label'], "tipo"), Array($filters['field']['value'], $role), Array("like", "="), "count");        $this->conn->executa();        $count['total'] = $this->conn->fetch[0];        $count['query'] = count($list);        return Array("field_list" => $field_list_old, "list" => $list, "count" => $count);    }    public function getUserIdByName($name) {        $name = trim($name);        $this->conn->prepareselect("usuario", array("nome", "id"), "nome", $name, "like", "", "", PDO::FETCH_NUM, "all", Array("nome", "ASC"), Array(0, 10));        if (!$this->conn->executa()) {            throw new Exception("Nenhum usuário encontrado.");        }        return $this->conn->fetch;    }    public function getUserIdByEmail($email) {        if ($email == "" || $this->checkEmail($email)) {            throw new Exception("O email é inválido.");        }        $this->conn->prepareselect("usuario", "id", "email", $email);        if (!$this->conn->executa() || $this->conn->rowcount != 1) {            throw new Exception("Nenhum usuário encontrado.");        }        return $this->conn->fetch[0];    }    public function checkEmail($email) {        $this->conn->prepareselect("usuario", array("email"), "email", $email);        if (!$this->conn->executa() || $this->conn->rowcount != 1) {            return false;        }        return true;    }    public function setRecoveryPoint($email) {        if (!$this->checkEmail($email)) {            throw new Exception("Nenhum usuário encontrado com o email informado.");        }        $recovery_code = md5(uniqid("r") . time());        $this->conn->prepareupdate($recovery_code, "codigo_recuperacao", "usuario", $email, "email");        if (!$this->conn->executa()) {            throw new Exception("Não foi possível criar o ponto de recuperação de senha.");        }        try {            mail::sendTemplateEmail("recovery_password_submit", array("recovery_code" => $recovery_code), $email, "Recuperação de Senha [ CarnaBoemia 2016 ]");        } catch (Exception $ex) {            throw new Exception("Não foi possível enviar a mensgem.");        }    }    public function recoveryUserPassword($code, $password) {        if (strlen($code) != 32 || is_numeric($code)) {            throw new Exception("Código de recuperação em formato inválido.");        }        $code = htmlentities($code);        if (strlen($password) < 6) {            throw new Exception("A senha deve conter ao menos 6 caracteres.");        }        $this->conn->prepareselect("usuario", "id", "codigo_recuperacao", $code);        if (!$this->conn->executa() || $this->conn->rowcount != 1) {            throw new Exception("Não foi possível encontrar esse código de recuperação. - " . $code);        }        $id = $this->conn->fetch[0];        if (!is_numeric($id)) {            throw new Exception("O identificador do usuário é inválido.");        }        $this->conn->prepareupdate(array(md5($password), 0), array("senha", "codigo_recuperacao"), "usuario", $id, "id");        if (!$this->conn->executa()) {            throw new Exception("Não foi possível alterar a senha do usuário.");        }    }    private function initAjax($url) {        $method = filter_input(INPUT_POST, "mode", FILTER_SANITIZE_FULL_SPECIAL_CHARS);        switch ($method) {            case "load_menu":                $this->loadUserMenu();                break;            case "change_user_instance":                $this->changeUserInstance();        }    }    public function loadUserMenu() {        try {            $user = $this->getUser();            try {                $instances = $user->getUserInstances();            } catch (Exception $ex) {                $instances = false;            }            Twig_Autoloader::register();            $this->twig_loader = new Twig_Loader_Filesystem('includes/interface/templates/manager');            $this->twig = new Twig_Environment($this->twig_loader);            echo json_encode(array("success" => "true", "html" => $this->twig->render("user_menu.twig", Array("config" => config::$html_preload, "user" => $user->getBasicInfo(), "instances" => $instances["instances"]))));        } catch (Exception $error) {            echo json_encode(array("success" => "false", "error" => $error->getMessage()));        }    }    public function changeUserInstance() {        try {            $user = $this->getUser();            $instance = filter_input(INPUT_POST, "instance_id", FILTER_VALIDATE_INT);            $user->setCurrentInstance($instance);            echo json_encode(array("success" => "true"));        } catch (Exception $error) {            echo json_encode(array("success" => "false", "error" => $error->getMessage()));        }    }    /**     * Inicializa a classe de controle, quando chamada pela interface via browser.     * @param Array $url     */    public function init($url) {        switch ($url[1]) {            case "logout":                $this->logoutUser();                header("location: " . HTTP_ROOT);                break;            case "ajax":                $this->initAjax($url);                break;        }    }}function init_module_users($url) {    $usercontroller = new userController();    $usercontroller->init($url);}?>