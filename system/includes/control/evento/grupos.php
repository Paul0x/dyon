<?php/* * **************************************** *     _____                     *    |  __ \                    *    | |  | |_   _  ___  _ __   *    | |  | | | | |/ _ \| '_ \  *    | |__| | |_| | (_) | | | | *    |_____/ \__, |\___/|_| |_| *             __/ |             *            |___/   *            *       Paulo Felipe Possa Parrira [ paul (dot) 0 (at) live (dot) de ] *  ===================================================================== *  File: grupo.php *  Type: Controller *  ===================================================================== *  */class grupoController {    private $event_id;    private $conn;    public function __construct($conn) {        $this->conn = $conn;    }    public function addGroup($user_leader, $event, $nome) {                if(!is_object($user_leader) || !is_numeric($user_leader->getId())) {            throw new Exception("Usuário inválido para criação do grupo.");        }                 if(!is_array($event) || !is_numeric($event['id'])) {            throw new Exception("Evento inválido para criação do grupo.");        }                if(trim($nome) == "" || is_null($nome)) {            throw new Exception("Nome do grupo é inválido.");        }                $this->conn->prepareselect("grupo","id",Array("id_lider","id_evento"),Array($user_leader->getId(),$event['id']));        $this->conn->executa();                if($this->conn->rowcount != 0) {            throw new Exception("O usuário já é líder de um grupo nesse evento.");        }                $cod_acesso = uniqid();        $query['fields'] = Array("id_lider","id_evento","nome","codigo_acesso");        $query['values'] = Array($user_leader->getId(), $event['id'], $nome, $cod_acesso);        $this->conn->prepareinsert("grupo", $query['values'], $query['fields'], "");        if(!$this->conn->executa()) {            throw new Exception("Não foi possível criar o grupo.");        }                $grupo_id = $this->conn->pegarMax("grupo") - 1;        return $grupo_id;            }        public function getGroupByCod($cod) {        $cod = trim($cod);                $fields = array("id", "id_lider", "id_evento", "nome", "codigo_acesso");        $this->conn->prepareselect("grupo", $fields, "codigo_acesso", $cod);        if(!$this->conn->executa() || $this->conn->rowcount != 1) {            throw new Exception("Nenhum grupo encontrado com esse código.");        }                return $this->conn->fetch;     }        public function verifyGroup($id_grupo, $id_evento) {                if(!is_numeric($id_grupo) || !is_numeric($id_evento)) {            throw new Exception("Informações inválidas para verificação do grupo.");        }                $this->conn->prepareselect("grupo","id",Array("id","id_evento"),Array($id_grupo,$id_evento));        if(!$this->conn->executa() || $this->conn->rowcount != 1) {            throw new Exception("Grupo não encontrado.");        }    }        public function loadGroupInfo($id_grupo, $pacote_status = array(1,2,3,4)) {        if(!is_numeric($id_grupo)) {            throw new Exception("Identificador do grupo inválida.");        }                $fields = array("id","id_lider","id_evento","nome","DATE_FORMAT(data_criacao,'%d/%m/%Y') as 'data_criacao'","codigo_acesso");                $this->conn->prepareselect("grupo", $fields, "id", $id_grupo);        if(!$this->conn->executa()) {            throw new Exception("Não foi possível pesquisar o grupo.");        }                $grupo = $this->conn->fetch;        $pacotemodel = new pacoteModel($this->conn);        $grupo['casa_apoio'] = "Indisponível";        $grupo['members'] = $pacotemodel->getGroupPacotes($id_grupo, $pacote_status, true);        $grupo['num_aprovados'] = 0;        $grupo['num_pendentes'] = 0;        $grupo['valor_total'] = 0;        foreach($grupo['members'] as $index => $member) {            if($member['status_pacote'] == 2 || $member['status_pacote'] == 3) {                $grupo['num_aprovados']++;                $grupo['valor_total'] += $member['valor'];            }            if($member['status_pacote'] == 1) {                $grupo['num_pendentes']++;            }                        $grupo['members'][$index]['valor'] = "R$".number_format($member['valor'],2,',',".");        }        $grupo['valor_total'] = "R$".number_format($grupo['valor_total'],2,',',".");        return $grupo;    }            public function getGroupMembers($id_grupo) {        if (!is_numeric($id_grupo)) {            throw new Exception("Identificador do grupo inválido. 2");        }        $pacotemodel = new pacoteModel($this->conn);        $members = $pacotemodel->getGroupMembers($id_grupo);        return $members;    }        public function editGroup($grupo) {        if(!is_numeric($grupo['id'])) {            throw new Exception("Identificador do grupo inválido.");        }                $info = $this->loadGroupInfo($grupo['id']);        $fields = array();        $values = array();        $binds = array();        $is_member = false;                if($info['id_lider'] != $grupo['new_lider'] && is_numeric($grupo['new_lider'])) {            foreach($info['members'] as $index => $member) {                if($member['id_usuario'] == $grupo['new_lider']) {                    $is_member = true;                }            }            if($is_member == false) {                throw new Exception("O usuário especificado não está no grupo.");            }            $fields[] = "id_lider";            $values[] = $grupo['new_lider'];               $binds[] = "INT";        }                if($info['nome'] != $grupo['new_nome'] && trim($grupo['new_nome']) != "") {            $fields[] = "nome";            $values[] = $grupo['new_nome'];            $binds[] = "STR";        }                if(count($fields) == 0) {            return $info;        }                $this->conn->prepareupdate($values, $fields, "grupo", $grupo['id'], "id", $binds);                if(!$this->conn->executa()) {            throw new Exception("Não foi possível atualizar o grupo.");        }                foreach($fields as $index => $field) {            $info[$field] = $values[$index];                    }                return $info;            }    }?>